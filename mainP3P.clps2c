set setGlobals 0x009D2C00
set callTwoHandlers 0x009D2C40
set maxSelectionBoxToFour 0x009D2CE0
set useSubIndexForSelection 0x009D2C90

set setCustomIteratorDrawOptions 0x009D2D30
set maxDrawOptionsToFour 0x009D2E00
set hardCodeYPositionsWhenScrollable 0x009D2EE0

set fixScrollingL2R2 0x009D2F70

set customSliderDraw 0x009D33C0

// GLOBALS //
// 009D2BE0 -> Number of total choices
// 009D2BE4 -> Super index
// 009D2BE8 -> Sub index
// 009D2BEC -> Synchronized flag
// GLOBALS //

ASM_START 0x003a7fd0
    li $a1, 0xf // Set custom id for multiple choice msgs
ASM_END

ASM_START 0x003A7D48
    nop // Cancel sound cue for moving in normal selector handler
ASM_END

ASM_START 0x03A3A04
    j 0x009D2C00
    sw $v0,0xC($s1)
ASM_END

ASM_START setGlobals
    sh $s2,0x1A($s1)
    lui $a0, 0x009d
    sh $s2, 0x2BE0($a0) // Save total choices
    sw $zero, 0x2BE4($a0) // Reset super index
    sw $zero, 0x2BE8($a0) // Reset sub index
    sw $zero, 0x2BEC($a0) // Reset synchronization flag
    j 0x003A3A0C
    nop
ASM_END

ASM_START 0x003A7770
    j 0x009D2C40
    nop
ASM_END

ASM_START callTwoHandlers
    lui $v0, 0x009d
    lw $a0, 0x2BE0($v0)
    li $a1, 0x4
    addiu $a2, $v0, 0x2BE4
    addiu $a3, $v0, 0x2BE8
    jal 0x0011abd0 // Call multi indexing handler to update sub/super index
    nop
    move $a0, $s5
    jal 0x003a7a40 // Call original handler for extra sounds and keep behaviour intact
    nop
    j 0x003a7778
    nop
ASM_END

ASM_START useSubIndexForSelection
    lui $v0, 0x009d
    lw $v1, 0x2BEC($v0) // Load synchronization flag
    bne $v1, $zero, synchronizedHandlers
    nop
    li $v1, 0x1
    sw $v1, 0x2BEC($v0) // Set synchronization flag

    lh $a1, 0x58($a0)
    sw $a1, 0x2BE8($v0)
    
    synchronizedHandlers: lw $a1, 0x2BE8($v0) // Load subindex
    lw $a1, 0x2BE8($v0)
    j 0x003A8188
    li $v1, -0x1
ASM_END

ASM_START 0x003a8180
    j 0x009D2C90
    nop
ASM_END

ASM_START 0x003a819c
    j 0x009D2CE0
    lh $v1,0x1a($a2)
ASM_END

ASM_START maxSelectionBoxToFour
    li $v0, 0x4
    slt $v0, $v0, $v1
    beq $v0, $zero, lessThanFour
    nop
    li $v1, 0x4 // If there are more than 4 elements in a msg we will force rounded selection to position like there are only 4 elements
    lessThanFour: li $v0, 0x4
    j 0x003a81a4
    nop
ASM_END

ASM_START 0x003b1494
    j 0x009D2D30
    nop
ASM_END

ASM_START setCustomIteratorDrawOptions
    addiu $sp, $sp, -0x20
    sd $t9, 0x0($sp)
    sd $fp, 0x10($sp)
    li $t9, 0xf
    bne $t9, $s5, noMultipleChoice // Check if we are in multiple choice
    nop
    lui $t9, 0x009d
    lw $t9, 0x2BE4($t9) // Load super index
    li $fp, 0x0

    b offsetDrawEnd // We offset the drawing options to the current super index
    nop
    offsetDrawStart: lw $s4, 0x28($s4)
    addiu $fp, $fp, 0x1
    offsetDrawEnd: bne $fp, $t9, offsetDrawStart
    nop

    noMultipleChoice: li $t9, 0x5
    j 0x003b16a0
    nop
ASM_END

ASM_START 0x003b16a0
    j 0x009D2E00
    nop
ASM_END

ASM_START maxDrawOptionsToFour
    li $v1, 1
    sub $t9, $t9, $v1
    beq $t9, $zero, endDrawing
    nop
    bne $s4, $zero, drawLoopStart
    nop
    endDrawing: ld $t9, 0x0($sp)
    ld $fp, 0x10($sp)
    addiu $sp, $sp, 0x20
    j 0x003B16A8
    nop
    drawLoopStart: j 0x003b149c
    nop
ASM_END

ASM_START 0x003b14a0
    j 0x009D2EE0
ASM_END

ASM_START hardCodeYPositionsWhenScrollable
    li $v0, 0xf
    bne $s5, $v0, endPositions // We look if we are in multiple choice
    nop
    li $v0, 0x4
    lui $v1, 0x009d
    lw $v1, 0x2BE0($v1)
    slt $v0, $v0, $v1
    beq $v0, $zero, endPositions // We look if we have more than 4 elements to force the values
    nop

    li $v0, 0x4
    beq $v0, $t9, continueWithValue 
    li $s6, 0x6AA // Change first position
    
    li $v0, 0x3
    beq $v0, $t9, continueWithValue 
    li $s6, 0x772 // Change second position

    li $v0, 0x2
    beq $v0, $t9, continueWithValue 
    li $s6, 0x83A // Change third position

    li $s6, 0x902 // Change fourth position
    b continueWithValue
    nop

    endPositions: lw $s6, 0x8($s4)
    continueWithValue: j 0x003B14A8
    nop
ASM_END

ASM_START 0x0011af5c
    j 0x009D2F70
    nop
ASM_END

ASM_START fixScrollingL2R2
    li $t0, 0x4
    bne $s4, $t0, L2R2On
    nop
    j 0x0011B070
    nop
    L2R2On: beq $v1, $zero, noPressed
    nop
    j 0x0011AF64
    nop
    noPressed: j 0x0011AFE4
    nop
ASM_END

ASM_START 0x003ab26c
    j 0x009D33C0
    nop
ASM_END

ASM_START customSliderDraw
    jal 0x00115980 // Clean SPR (original call)
    nop

    lui $v1, 0x009d
    lw $v1, 0x2BE0($v1)
    li $a0, 0x4
    slt $v1, $a0, $v1
    beq $v1, $zero, endSliderDrawn // Skip slider drawing if there are 4 elements or less
    nop

    // DRAW TOP OUTTER PART SLIDER //
    daddu $a0,$zero,$zero
    lw $a1,-0x469C($gp)
    addiu $a2,$zero,0x2c
    jal 0x001158b0
    nop
    daddu $s1, $v0, $zero

    li $a0, 0xd5 // X position
    mtc1 $a0,$f0 
    nop 
    cvt.s.w $f0,$f0
    swc1 $f0,0x10($v0)

    li $a0, 0xfa // Y position
    mtc1 $a0,$f0 
    nop 
    cvt.s.w $f0,$f0
    swc1 $f0,0x14($v0)

    sw $zero,0x2C($v0)
    sb $s0,0x19($v0)
    daddu $a0,$s1,$zero
    addiu $a1,$zero,0x1
    jal 0x001127d0
    nop 
    daddu $a0,$s1,$zero
    jal 0x00115980
    nop 
    // DRAW TOP OUTTER PART SLIDER //
    
    // DRAW BOTTOM OUTTER PART SLIDER //
    daddu $a0,$zero,$zero
    lw $a1,-0x469C($gp)
    addiu $a2,$zero,0x2d
    jal 0x001158b0
    nop 
    daddu $s1, $v0, $zero

    li $a0, 0xd5 // X position
    mtc1 $a0,$f0 
    nop 
    cvt.s.w $f0,$f0
    swc1 $f0,0x10($v0)

    li $a0, 0x140 // Y position
    mtc1 $a0,$f0 
    nop 
    cvt.s.w $f0,$f0
    swc1 $f0,0x14($v0)

    sw $zero,0x2C($v0)
    sb $s0,0x19($v0)
    daddu $a0,$s1,$zero
    addiu $a1,$zero,0x1
    jal 0x001127d0
    nop 
    daddu $a0,$s1,$zero
    jal 0x00115980
    nop 
    // DRAW BOTTOM OUTTER PART SLIDER //
    
    // DRAW INNER SLIDER //
    daddu $a0,$zero,$zero
    lw $a1,-0x469C($gp)
    addiu $a2,$zero,0x2b
    jal 0x001158b0
    nop 
    daddu $s1, $v0, $zero
    
    li $a0, 0xd7 // X position
    lui $a0, 0x4356
    addiu $a0, $a0, 0xEB85
    mtc1 $a0,$f0 
    nop 
    swc1 $f0,0x10($v0)

    li $a0, 0xf5 // Y initial position
    mtc1 $a0,$f2 
    nop 
    cvt.s.w $f2,$f2
    

    lui $a2, 0x009d
    lw $a1,0x2be0($a2) // Get total elements of MSG list
    addiu $a0,$a1,-0x4
    blez $a0,noSliderElements
    nop 
    lw $v1, 0x2be4($a2) // Get super index
    addiu $a2,$zero,0x35
    mult $v1, $a2
    mflo $a2
    div $a2,$a0
    nop 
    nop 
    mflo $a2
    beq $zero,$zero,continueSliderDraw
    nop 
    noSliderElements: daddu $a2,$zero,$zero
    continueSliderDraw: mtc1 $a2,$f0
    nop

    // Calculate new Y position for current selected element 
    // depending on the number of selectable elements in MSG
    cvt.s.w $f1,$f0
    lui $a2,0x4208
    mtc1 $a2,$f0
    nop
    add.s $f0,$f0,$f2
    add.s $f1,$f0,$f1
    lui $a2,0x41C0
    mtc1 $a2,$f0
    nop
    sub.s $f2,$f1,$f0 // Final Y position inner part

    swc1 $f2,0x14($v0)

    sw $zero,0x2C($v0)
    sb $s0,0x19($v0)
    daddu $a0,$s1,$zero
    addiu $a1,$zero,0x1
    jal 0x001127d0
    nop 
    daddu $a0,$s1,$zero
    jal 0x00115980
    nop 
    // DRAW INNER SLIDER //
    
    endSliderDrawn: j 0x003ab274
    nop
ASM_END